// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: src/proto/hero.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "hero";

export interface HeroById {
  id: number;
}

export interface Hero {
  id: number;
  name: string;
}

export interface FileChunk {
  data: Uint8Array;
}

export interface FileResponse {
  message: string;
}

export const HERO_PACKAGE_NAME = "hero";

export interface HeroServiceClient {
  unaryCall(request: HeroById): Observable<Hero>;

  clientStreamAsObservable(request: Observable<HeroById>): Observable<Hero>;

  serverStreamAsObservable(request: HeroById): Observable<Hero>;

  bidirectionalStreamAsObservable(request: Observable<HeroById>): Observable<Hero>;

  saveFile(request: Observable<FileChunk>): Observable<FileResponse>;
}

export interface HeroServiceController {
  unaryCall(request: HeroById): Promise<Hero> | Observable<Hero> | Hero;

  clientStreamAsObservable(request: Observable<HeroById>): Promise<Hero> | Observable<Hero> | Hero;

  serverStreamAsObservable(request: HeroById): Observable<Hero>;

  bidirectionalStreamAsObservable(request: Observable<HeroById>): Observable<Hero>;

  saveFile(request: Observable<FileChunk>): Promise<FileResponse> | Observable<FileResponse> | FileResponse;
}

export function HeroServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["unaryCall", "serverStreamAsObservable"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("HeroService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = ["clientStreamAsObservable", "bidirectionalStreamAsObservable", "saveFile"];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("HeroService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const HERO_SERVICE_NAME = "HeroService";
